### Copyright (c) ${YEAR} ${OWNER}. All rights reserved.
### You may use, distribute, and modify this code under
### the terms of the ${LICENSE} license.
### 
### This code is distributed as part of the ${PROJECT_NAME} project.
### 
### For a copy of the license, please go to ${REPO}/LICENSE

# Builds module into a shared library

cmake_minimum_required(VERSION 3.0)

message("Building ${DOMAIN_NAME} module ${MODULE_NAME}...")

set(LIBRARY_NAME ${OUTPUT_NAME})
set(LIBRARY_NAME_UPPER ${OUTPUT_NAME_UPPER})

set(${LIBRARY_NAME_UPPER}_SRC${SOURCES}
)

set(${LIBRARY_NAME_UPPER}_HEADERS${HEADERS}
)

include_directories(${CMAKE_CURRENT_LIST_DIR}/Public)

set(LIBRARY_SCOPE PUBLIC)

if(${LIBRARY_NAME_UPPER}_SRC)
    ${BUILD_INSTRUCTION}

    target_include_directories(${LIBRARY_NAME}
        ${LIBRARY_SCOPE} ${CMAKE_CURRENT_LIST_DIR}/Public
        PRIVATE ${CMAKE_CURRENT_LIST_DIR}/Private)

    target_compile_definitions(${LIBRARY_NAME}
        PRIVATE BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS_B}
        PRIVATE ${LIBRARY_NAME_UPPER}_EXPORT=1)
else()
    add_library(${LIBRARY_NAME} INTERFACE)

    set(LIBRARY_SCOPE INTERFACE)

    target_include_directories(${LIBRARY_NAME}
        ${LIBRARY_SCOPE} ${CMAKE_CURRENT_LIST_DIR}/Public)
endif()

get_target_property(${LIBRARY_NAME_UPPER}_TYPE ${LIBRARY_NAME} TYPE)
message(STATUS "Built ${DOMAIN_NAME} module ${MODULE_NAME} as ${${LIBRARY_NAME_UPPER}_TYPE}")

target_compile_definitions(${LIBRARY_NAME}
    ${LIBRARY_SCOPE} ENGINE_VERSION_MAJOR=${ENGINE_VERSION_MAJOR}
    ${LIBRARY_SCOPE} ENGINE_VERSION_MINOR=${ENGINE_VERSION_MINOR}
    ${LIBRARY_SCOPE} ENGINE_VERSION_PATCH=${ENGINE_VERSION_PATCH}
    ${LIBRARY_SCOPE} ENGINE_VERSION_EXTRA="${ENGINE_VERSION_EXTRA}"
    ${LIBRARY_SCOPE} ENGINE_GRAPHICS_OPENGL=${GRAPHICS_OPENGL_ENABLED}
    ${LIBRARY_SCOPE} ENGINE_GRAPHICS_DIRECTX=${GRAPHICS_DIRECTX_ENABLED}
    ${LIBRARY_SCOPE} ENGINE_GRAPHICS_VULKAN=${GRAPHICS_VULKAN_ENABLED}
    ${LIBRARY_SCOPE} ENGINE_GRAPHICS_METAL=${GRAPHICS_METAL_ENABLED})

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(${LIBRARY_NAME}
        ${LIBRARY_SCOPE} ENGINE_COMPILE_DEBUG=1)
endif()

${CMAKE_DEPENDENCIES}

${CMAKE_CUSTOM_INSTRUCTIONS}

# Install Library
install(TARGETS ${LIBRARY_NAME}
    ARCHIVE DESTINATION ${PROJECT_SOURCE_DIR}/Lib
    LIBRARY DESTINATION ${PROJECT_SOURCE_DIR}/Lib
    RUNTIME DESTINATION ${PROJECT_SOURCE_DIR}/Bin)

# Install Library Headers
install(FILES ${${LIBRARY_NAME_UPPER}_HEADERS}
    DESTINATION ${PROJECT_SOURCE_DIR}/Lib/Include)

if(BUILD_TESTS)
    get_target_property(TARGET_TYPE ${LIBRARY_NAME} TYPE)
    if(NOT ${TARGET_TYPE} STREQUAL "EXECUTABLE")
        message(STATUS "Adding module ${MODULE_NAME} to test suite")

        file(GLOB_RECURSE ${LIBRARY_NAME_UPPER}_TEST_SRC
            ${CMAKE_CURRENT_LIST_DIR}
            ${CMAKE_CURRENT_LIST_DIR}/Test/*.cpp)
            
        set(${DOMAIN_NAME_UPPER}_TEST_SRC_FILES ${${DOMAIN_NAME_UPPER}_TEST_SRC_FILES} ${${LIBRARY_NAME_UPPER}_TEST_SRC} PARENT_SCOPE)
        # TODO: Handle case where module has only empty cpp source files (no symbols)
        set(${DOMAIN_NAME_UPPER}_TEST_LIBRARIES ${${DOMAIN_NAME_UPPER}_TEST_LIBRARIES} ${LIBRARY_NAME} PARENT_SCOPE)

        set(${DOMAIN_NAME_UPPER}_TEST_INCLUDES ${${DOMAIN_NAME_UPPER}_TEST_INCLUDES} ${CMAKE_CURRENT_LIST_DIR}/Public PARENT_SCOPE)
        
    endif()
endif(BUILD_TESTS)