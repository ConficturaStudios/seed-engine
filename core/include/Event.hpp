#ifndef SEEDENGINE_INCLUDE_EVENT_H_
#define SEEDENGINE_INCLUDE_EVENT_H_

#include "Core.hpp"

namespace Engine {
    namespace Event {

        // The type classification assigned to an event.
        enum class EventType : unsigned int {
            // A generic event.
            EVENT         = 0,
            // A system event generated from outside of the program.
            SYSTEM        = FLAG(0),
            // An event generated by client code such as an editor or game.
            CLIENT        = FLAG(1),
            // An event generated within the engine itself.
            ENGINE        = FLAG(2),
            // An event generated by a window under the control of the engine.
            WINDOW        = FLAG(3),
            // An event generated by a hardware peripheral such as a mouse or keyboard.
            PERIPHERAL    = FLAG(4),
            // An event generated by a mouse. This is a type of peripheral event.
            MOUSE         = PERIPHERAL | (PERIPHERAL << 1),
            // An event generated by a keyboard. This is a type of peripheral event.
            KEYBOARD      = PERIPHERAL | (PERIPHERAL << 2),
            // An event generated by a controller. This is a type of peripheral event.
            CONTROLLER    = PERIPHERAL | (PERIPHERAL << 3)
        };

        enum class ButtonState : unsigned char {
            // The button is in a neutral state
            NONE      = 0,
            // The button is pressed.
            PRESSED   = 1,
            // The button is released.
            RELEASED  = 2
        };

        // An event to be processed by the program.
        class ENGINE_DLL Event {

            friend class EventDispatcher;

        public:

            Event() {}

            virtual EventType getEventType() const = 0;
            virtual const char* getName() const = 0;
            virtual const unsigned int getId() const = 0;

            inline bool isType(EventType type) {
                unsigned int uint_t = static_cast<unsigned int>(type);
                return ((static_cast<unsigned int>(getEventType()) & uint_t) == uint_t);
            }

        protected:

            bool handled = false;

        };

        #pragma warning(disable: 4251)
        // An event dispatcher for handling event buffering and the distribution of events to deligates.
        class ENGINE_DLL EventDispatcher {

        public:

            static void registerDeligate(const unsigned int, std::function<bool(Event*)>);

            static void push(Event*);

            static Event* pop();

            static void run(unsigned int);


        private:

            static std::queue<Event*> event_buffer;
            static std::map<const unsigned int, std::vector<std::function<bool(Event*)>>> deligate_regtistry;

        };

        // Event Subclasses


        // An event triggered by mouse input.
        class ENGINE_DLL MouseEvent : public Event {

        public:

            MouseEvent(float x, float y)
                : Event(), x_(x), y_(y) {
                cur_x_ = x;
                cur_y_ = y;
            }

            EventType getEventType() const { return EventType::MOUSE; }

            inline float x() { return x_; }
            inline float y() { return y_; }

        protected:
            float x_, y_;
            static float cur_x_;
            static float cur_y_;

        };

        // An event triggered by mouse movement.
        class ENGINE_DLL MouseMovedEvent : public MouseEvent {

        public:

            MouseMovedEvent(float x, float y)
                : MouseEvent(x, y) {
                dx_ = x - cur_x_;
                dy_ = y - cur_y_;
            }

            const char* getName() const { return "Mouse Moved Event"; }
            const unsigned int getId() const { return EVENT_ID; }

            inline float dx() { return dx_; }
            inline float dy() { return dy_; }

            static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::MOUSE) << 3);

        private:

            float dx_, dy_;

        };

        // An event triggered by a mouse button.
        class ENGINE_DLL MouseButtonEvent : public MouseEvent {

        public:

            MouseButtonEvent(int button, ButtonState state, float x, float y)
                : MouseEvent(x, y), button_(button), state_(state) {}

            const char* getName() const { return "Mouse Button Event"; }
            const unsigned int getId() const { return EVENT_ID; }

            inline int button() { return button_; }
            inline ButtonState state() { return state_; }

            static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::MOUSE) << 3) | 1;

        private:

            int button_;
            ButtonState state_;

        };

        // An event triggered by mouse movement.
        class ENGINE_DLL MouseScrolledEvent : public MouseEvent {

        public:

            MouseScrolledEvent(float x_offset, float y_offset)
                : MouseEvent(cur_x_, cur_y_), x_offset_(x_offset), y_offset_(y_offset) {}

            const char* getName() const { return "Mouse Moved Event"; }
            const unsigned int getId() const { return EVENT_ID; }

            inline float x_offset() { return x_offset_; }
            inline float y_offset() { return y_offset_; }

            static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::MOUSE) << 3) | 2;

        private:

            float x_offset_, y_offset_;

        };

        // An event triggered by a keyboard action.
        class ENGINE_DLL KeyboardEvent : public Event {

        public:

            KeyboardEvent(int keycode, int repeat, ButtonState state)
                : Event(), keycode_(keycode), repeat_(repeat), state_(state) {}


            EventType getEventType() const { return EventType::KEYBOARD; }
            const char* getName() const { return "Keyboard Event"; }
            const unsigned int getId() const { return EVENT_ID; }

            inline int keycode() { return keycode_; }
            inline int repeat() { return repeat_; }
            inline ButtonState state() { return state_; }

            static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::KEYBOARD) << 3);

        private:

            int keycode_;
            int repeat_;
            ButtonState state_;

        };

    }
}

#endif