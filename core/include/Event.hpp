#ifndef SEEDENGINE_INCLUDE_EVENT_H_
#define SEEDENGINE_INCLUDE_EVENT_H_

#include "Core.hpp"
#include "Input.hpp"

namespace seedengine {

    /** The type classification assigned to an event. */
    enum class EventType : unsigned int {
        /** A generic event. */
        EVENT         = 0,
        /** A system event generated from outside of the program. */
        SYSTEM        = FLAG(0),
        /** An event generated by client code such as an editor or game. */
        CLIENT        = FLAG(1),
        /** An event generated within the engine itself. */
        ENGINE        = FLAG(2),
        /** An event generated by a window under the control of the engine. */
        WINDOW        = FLAG(3),
        /** An event generated by a hardware peripheral such as a mouse or keyboard. */
        PERIPHERAL    = FLAG(4),
        /** An event generated by a mouse. This is a type of peripheral event. */
        MOUSE         = PERIPHERAL | (PERIPHERAL << 1),
        /** An event generated by a keyboard. This is a type of peripheral event. */
        KEYBOARD      = PERIPHERAL | (PERIPHERAL << 2),
        /** An event generated by a controller. This is a type of peripheral event. */
        CONTROLLER    = PERIPHERAL | (PERIPHERAL << 3)
    };

    /**
     * @brief An event to be processed by the program.
     * @details
     */
    class Event {

        friend class EventDispatcher;

    public:

        /** Constructs a new Event object */
        Event() {}
        /** Destroy the Event object */
        virtual ~Event() {}

        /**
         * @brief Get this Event's type.
         * 
         * @return EventType The Event type.
         */
        virtual EventType getEventType() const = 0;
        /**
         * @brief Get the name of this Event.
         * 
         * @return const char* The name of this Event.
         */
        virtual const char* getName() const = 0;
        /**
         * @brief Get the ID of this Event.
         * 
         * @return const unsigned int The ID of this Event.
         */
        virtual const unsigned int getId() const = 0;

        /**
         * @brief Checks if this Event is of a specific type.
         * 
         * @param type The type to check against.
         * @return true If this Event is the specified type.
         * @return false If this Event is not the specified type.
         */
        inline bool isType(EventType type) const {
            unsigned int uint_type = static_cast<unsigned int>(type);
            return ((static_cast<unsigned int>(getEventType()) & uint_type) == uint_type);
        }

    protected:

        /** Has this event been handled? */
        bool handled = false;

    };

    /**
     * @brief An event dispatcher for handling event buffering and the distribution of events to deligates.
     * @details
     */
    class EventDispatcher final {

    public:

        /** A function deligate that recieves an event. */
        typedef ::std::function<void(Event&)> EventDeligate;

        /**
         * @brief Registers a function delegate to a specific Event ID to bind the actions.
         * 
         * @param event_id The ID of the event to bind to.
         * @param deligate The function to bind to the event.
         */
        static void registerDeligate(const unsigned int event_id, EventDeligate deligate);

        /**
         * @brief Pushs an event into the event queue. This is a non-blocking event.
         *
         * @tparam E The event type to force.
         * @tparam Args The variadic parameter pack used to construct the Event.
         * @tparam typename Conditional compilation based on the base type of E.
         * @param args The arguments used when constructing the Event of type E.
         */
        template <
            class E,
            class... Args,
            typename = typename std::enable_if<std::is_base_of<Event, E>::value>::type
        >
        static void push(Args&&... args) {
            event_buffer.push(std::make_shared<E>(std::forward<Args>(args)...));
        }

        /**
         * @brief Removes and returns the next event in the buffer.
         * 
         * @return std::shared_ptr<Event> The next event in the buffer.
         */
        static std::shared_ptr<Event> pop();

        /**
         * @brief Forces an event to notify its bound functions without adding
         *        it to the queue. This is a blocking event.
         * 
         * @tparam E The event type to force.
         * @tparam Args The variadic parameter pack used to construct the Event.
         * @tparam std::enable_if<std::is_base_of<Event, E>::value>::type Conditional
         *         compilation based on the base type of E.
         * @param args The arguments used when constructing the Event of type E.
         */
        template <
            class E,
            class... Args,
            typename = typename std::enable_if<std::is_base_of<Event, E>::value>::type
        >
        static void force(Args&&... args) {
            auto event_ptr = std::make_shared<E>(std::forward<Args>(args)...);
            // Iterate through all delegates bound to this event
            for (EventDeligate deligate : deligate_regtistry[event_ptr->getId()])
            {
                // Call the function
                deligate(*event_ptr);
            }
        }

        /**
         * @brief Runs the deligate functions for every event in the buffer of the specified type.
         *        The events are removed after execution of its deligates.
         * @param type_filter The types that will be run, skipping all others
         */
        static void run(unsigned int type_filter);


    private:

        /** The event buffer queue. */
        static std::queue<std::shared_ptr<Event>> event_buffer;
        /** A mapped registry of all events and their bound functions. */
        static std::map<const unsigned int, std::vector<EventDeligate>> deligate_regtistry;

    };

    // Event Subclasses

    /**
     * @brief An event triggered by the system.
     * @details
     */
    class SystemEvent : public Event {

    public:

        /** Constructs a new System Event. */
        SystemEvent() : Event() {}

        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::SYSTEM; }
        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "System Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::SYSTEM) << 4);

    protected:

    };

    /**
     * @brief An event triggered by the client application.
     * @details
     */
    class ClientEvent : public Event {

    public:

        /** Constructs a new Client Event. */
        ClientEvent() : Event() {}

        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::CLIENT; }
        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Client Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::CLIENT) << 4);

    protected:

    };

    /**
     * @brief An event triggered by the engine itself.
     * @details
     */
    class EngineEvent : public Event {

    public:

        /** Constructs a new Engine Event. */
        EngineEvent() : Event() {}

        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::ENGINE; }

    protected:

    };

    /**
     * @brief An event triggered by an engine logic tick.
     * @details
     */
    class EngineTickEvent : public EngineEvent {

    public:

        /**
         * @brief Construct a new Engine Tick Event.
         * 
         * @param delta_time The delta time of the application.
         */
        EngineTickEvent(float delta_time)
            : EngineEvent(), delta_time_(delta_time) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Engine Tick Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the delta time during this event.
         * 
         * @return float The delta time when this event occured.
         */
        inline float deltaTime() const { return delta_time_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::ENGINE) << 4);

    protected:

        /** The delta time when this event occured. */
        float delta_time_;

    };

    /**
     * @brief An event triggered during the render of a frame.
     * @details
     */
    class EngineRenderEvent : public EngineEvent {

    public:

        /** Constructs a new Engine Render Event. */
        EngineRenderEvent()
            : EngineEvent() {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Engine Render Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::ENGINE) << 4) | 1;

    protected:

    };

    /**
     * @brief An event triggered before rendering a frame.
     * @details
     */
    class EnginePreRenderEvent : public EngineEvent {

    public:

        /** Constructs a new Engine Pre-Render Event. */
        EnginePreRenderEvent()
            : EngineEvent() {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Engine Pre-Render Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::ENGINE) << 4) | 2;

    protected:

    };

    /**
     * @brief An event triggered after rendering a frame.
     * @details
     */
    class EnginePostRenderEvent : public EngineEvent {

    public:

        /** Constructs a new Engine Post-Render Event. */
        EnginePostRenderEvent()
            : EngineEvent() {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Engine Post-Render Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::ENGINE) << 4) | 3;

    protected:

    };

    /**
     * @brief An event triggered after loading game data.
     * @details
     */
    class EngineGameLoadEvent : public EngineEvent {

    public:

        /** Constructs a new Engine Game Load Event. */
        EngineGameLoadEvent()
            : EngineEvent() {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Engine Game Load Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::ENGINE) << 4) | 4;

    protected:

    };

    class Window; // Forward declare Window class

    /**
     * @brief An event triggered by the application window.
     * @details
     */
    class WindowEvent : public Event {

        friend class Window;

    public:

        /**
         * @brief Constructs a new Window Event.
         * 
         * @param window A pointer to the affected window.
         */
        WindowEvent(Window* window)
            : Event(), window_(window) {}

        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::WINDOW; }

        /**
         * @brief Returns a pointer to the affected window.
         * 
         * @return Window* A pointer to the affected window.
         */
        inline Window* window() const { return window_; }

    protected:

        /** The affected window */
        Window* window_;

    };

    /**
     * @brief An event triggered when a window is created.
     * @details
     */
    class WindowCreatedEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Created Event.
         * 
         * @param window The ID of the affected window.
         */
        WindowCreatedEvent(Window* window)
            : WindowEvent(window) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Created Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4);

    protected:

    };

    /**
     * @brief An event triggered when a window is resized.
     * @details
     */
    class WindowResizeEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Resize Event.
         * 
         * @param window The ID of the affected window.
         * @param width The new width of the window.
         * @param height The new height of the window.
         */
        WindowResizeEvent(Window* window, unsigned int width, unsigned int height)
            : WindowEvent(window), width_(width), height_(height) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Resize Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the new width.
         * 
         * @return unsigned int The new width.
         */
        inline unsigned int width() const { return width_; }
        
        /**
         * @brief Returns the new height.
         * 
         * @return unsigned int The new height.
         */
        inline unsigned int height() const { return height_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 1;

    protected:

        /** The new width. */
        unsigned int width_;
        /** The new height. */
        unsigned int height_;

    };

    /**
     * @brief An event triggered when a window is moved.
     * @details
     */
    class WindowPositionEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Position Event.
         * 
         * @param window The ID of the affected window.
         * @param x The new x position of the window.
         * @param y The new y position of the window.
         */
        WindowPositionEvent(Window* window, unsigned int x, unsigned int y)
            : WindowEvent(window), x_(x), y_(y) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Position Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the new x position.
         * 
         * @return unsigned int The new x position.
         */
        inline unsigned int x() const { return x_; }
        
        /**
         * @brief Returns the new y position.
         * 
         * @return unsigned int The new y position.
         */
        inline unsigned int y() const { return y_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 2;

    protected:

        /** The new x position. */
        unsigned int x_;
        /** The new y position. */
        unsigned int y_;

    };

    /**
     * @brief An event triggered when a window is closed.
     * @details
     */
    class WindowCloseEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Close Event.
         * 
         * @param window The ID of the affected window.
         */
        WindowCloseEvent(Window* window)
            : WindowEvent(window) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Close Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 3;

    protected:

    };

    /**
     * @brief An event triggered when a window is refreshed.
     * @details
     */
    class WindowRefreshEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Refresh Event.
         * 
         * @param window The ID of the affected window.
         */
        WindowRefreshEvent(Window* window)
            : WindowEvent(window) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Refresh Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 4;

    protected:

    };

    /**
     * @brief An event triggered when a window changes focus.
     * @details
     */
    class WindowFocusEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Focus Event.
         * 
         * @param window The ID of the affected window.
         * @param has_focus True if the window has gained focus.
         */
        WindowFocusEvent(Window* window, bool has_focus)
            : WindowEvent(window), has_focus_(has_focus) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Focus Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns true if the window has focus.
         * 
         * @return true If the window has focus.
         * @return false If the window does not have focus.
         */
        inline bool hasFocus() const { return has_focus_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 5;

    protected:

        /** True if the window has focus. */
        bool has_focus_;

    };

    /**
     * @brief An event triggered when a window is minimized.
     * @details
     */
    class WindowMinimizeEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Minimize Event.
         * 
         * @param window The ID of the affected window.
         * @param minimized True if the window has been minimized.
         */
        WindowMinimizeEvent(Window* window, bool minimized)
            : WindowEvent(window), minimized_(minimized) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Minimze Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns true if the window has been minimized.
         * 
         * @return true If the window has been minimized.
         * @return false If the window has not been minimized.
         */
        inline bool minimized() const { return minimized_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 6;

    protected:

        /** True if the window has been minimized. */
        bool minimized_;

    };

    /**
     * @brief An event triggered when a window is maximized.
     * @details
     */
    class WindowMaximizeEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Maximize Event.
         * 
         * @param window The ID of the affected window.
         * @param maximized True if the window has been maximized.
         */
        WindowMaximizeEvent(Window* window, bool maximized)
            : WindowEvent(window), maximized_(maximized) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Maximize Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns true if the window has been maximized.
         * 
         * @return true If the window has been maximized.
         * @return false If the window has not been maximized.
         */
        inline bool maximized() const { return maximized_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 7;

    protected:

        /** True if the window has been maximized. */
        bool maximized_;

    };

    /**
     * @brief An event triggered when a window is updated.
     * @details
     */
    class WindowUpdateEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Update Event.
         * 
         * @param window The ID of the affected window.
         */
        WindowUpdateEvent(Window* window)
            : WindowEvent(window) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Update Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 8;

    protected:

    };

    /**
     * @brief An event triggered when a window has its content scaled.
     * @details
     */
    class WindowConentScaleEvent : public WindowEvent {

    public:

        /**
         * @brief Constructs a new Window Conent Scale Event.
         * 
         * @param window The ID of the affected window.
         * @param x_scale The new x content scale of the window.
         * @param y_scale The new y content scale of the window.
         */
        WindowConentScaleEvent(Window* window, float x_scale, float y_scale)
            : WindowEvent(window), x_scale_(x_scale), y_scale_(y_scale) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Window Content Scale Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the new x content scale.
         * 
         * @return float The new x content scale.
         */
        inline float x_scale() const { return x_scale_; }
        /**
         * @brief Returns the new y content scale.
         * 
         * @return float The new y content scale.
         */
        inline float y_scale() const { return y_scale_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::WINDOW) << 4) | 9;

    protected:

        /** The new x content scale. */
        float x_scale_;
        /** The new y content scale. */
        float y_scale_;

    };

    /**
     * @brief An event triggered by peripheral hardware.
     * @details
     */
    class PeripheralEvent : public Event {

    public:

        /** Constructs a new Peripheral Hardware Event. */
        PeripheralEvent() : Event() {}

        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::PERIPHERAL; }

    protected:

    };

    /**
     * @brief An event triggered by mouse input.
     * @details
     */
    class MouseEvent : public PeripheralEvent {

    public:

        /**
         * @brief Constructs a new Mouse Event.
         * 
         * @param x The new x position of the mouse.
         * @param y The new y position of the mouse.
         */
        MouseEvent(float x, float y)
            : PeripheralEvent(), x_(x), y_(y) {
            cur_x_ = x;
            cur_y_ = y;
        }

        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::MOUSE; }

        /**
         * @brief Returns the new x position of the mouse.
         * 
         * @return float The new x position of the mouse.
         */
        inline float x() const { return x_; }
        /**
         * @brief Returns the new y position of the mouse.
         * 
         * @return float The new y position of the mouse.
         */
        inline float y() const { return y_; }

    protected:

        /** The new x position of the mouse. */
        float x_;
        /** The new y position of the mouse. */
        float y_;
        /** The current x position of the mouse. */
        static float cur_x_;
        /** The current y position of the mouse. */
        static float cur_y_;

    };

    /**
     * @brief An event triggered by mouse movement.
     * @details
     */
    class MouseMovedEvent : public MouseEvent {

    public:

        /**
         * @brief Constructs a new Mouse Moved Event.
         * 
         * @param x The new x position of the mouse.
         * @param y The new y position of the mouse.
         */
        MouseMovedEvent(float x, float y)
            : MouseEvent(x, y) {
            dx_ = x - cur_x_;
            dy_ = y - cur_y_;
        }

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Mouse Moved Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the change in the x position of the mouse.
         * 
         * @return float The change in the x position of the mouse.
         */
        inline float dx() const { return dx_; }
        /**
         * @brief Returns the change in the y position of the mouse.
         * 
         * @return float The change in the y position of the mouse.
         */
        inline float dy() const { return dy_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::MOUSE) << 4);

    private:

        /** The change in the x position of the mouse. */
        float dx_;
        /** The change in the y position of the mouse. */
        float dy_;

    };

    /**
     * @brief An event triggered by a mouse button.
     * @details
     */
    class MouseButtonEvent : public MouseEvent {

    public:

        /**
         * @brief Constructs a new Mouse Button Event.
         * 
         * @param button_id The ID of the button affected.
         * @param state The state of the affected button.
         * @param mods Applied modifier flags.
         */
        MouseButtonEvent(unsigned int button_id, input::ButtonState state, unsigned int mods)
            : MouseEvent(cur_x_, cur_y_), button_id_(button_id), state_(state), mods_(mods) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Mouse Button Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the ID of the button affected.
         * 
         * @return unsigned int The ID of the button affected.
         */
        inline unsigned int buttonId() const { return button_id_; }
        /**
         * @brief Returns the state of the affected button.
         * 
         * @return input::ButtonState The state of the affected button.
         */
        inline input::ButtonState state() const { return state_; }
        /**
         * @brief Returns the applied modifiers.
         * 
         * @return unsigned int The applied modifiers.
         */
        inline unsigned int mods() const { return mods_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::MOUSE) << 4) | 1;

    private:

        /** The ID of the button affected. */
        unsigned int button_id_;
        /** The state of the affected button. */
        input::ButtonState state_;
        /** Any shift, ctrl, alt, super modifier flags applied to the key. */
        unsigned int mods_;

    };

    /**
     * @brief An event triggered by mouse movement.
     * @details
     */
    class MouseScrolledEvent : public MouseEvent {

    public:

        /**
         * @brief Constructs a new Mouse Scrolled Event.
         * 
         * @param x_offset The amount to scroll in the x direction.
         * @param y_offset The amount to scroll in the y direction.
         */
        MouseScrolledEvent(float x_offset, float y_offset)
            : MouseEvent(cur_x_, cur_y_), x_offset_(x_offset), y_offset_(y_offset) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Mouse Moved Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the amount to scroll in the x direction.
         * 
         * @return float The amount to scroll in the x direction.
         */
        inline float x_offset() const { return x_offset_; }
        /**
         * @brief Returns the amount to scroll in the y direction.
         * 
         * @return float The amount to scroll in the y direction.
         */
        inline float y_offset() const { return y_offset_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::MOUSE) << 4) | 2;

    private:

        /** The amount to scroll in the x direction. */
        float x_offset_;
        /** The amount to scroll in the y direction. */
        float y_offset_;

    };

    /**
     * @brief An event triggered by a keyboard action.
     * @details
     */
    class KeyboardEvent : public PeripheralEvent {

    public:

        /**
         * @brief Constructs a new Keyboard Event.
         * 
         * @param keycode The keycode of the affected key.
         * @param repeat The repeat count.
         * @param state The state of the affected key.
         * @param mods Applied modifier flags.
         */
        KeyboardEvent(unsigned int keycode, unsigned int repeat, input::ButtonState state, unsigned int mods)
            : PeripheralEvent(), keycode_(keycode), repeat_(repeat), state_(state), mods_(mods) {}


        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::KEYBOARD; }
        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Keyboard Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the keycode of the affected key.
         * 
         * @return unsigned int The keycode of the affected key.
         */
        inline unsigned int keycode() const { return keycode_; }
        /**
         * @brief Returns the repeat count.
         * 
         * @return unsigned int The repeat count.
         */
        inline unsigned int repeat() const { return repeat_; }
        /**
         * @brief Returns the state of the affected key.
         * 
         * @return input::ButtonState The state of the affected key.
         */
        inline input::ButtonState state() const { return state_; }
        /**
         * @brief Returns the applied modifiers.
         * 
         * @return unsigned int The applied modifiers.
         */
        inline unsigned int mods() const { return mods_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::KEYBOARD) << 4);

    private:

        /** The keycode of the affected key. */
        unsigned int keycode_;
        /** The repeat count. */
        unsigned int repeat_;
        /** The state of the affected key. */
        input::ButtonState state_;
        /** Any shift, ctrl, alt, super modifier flags applied to the key. */
        unsigned int mods_;

    };

    /**
     * @brief An event triggered by a controller action.
     * @details
     */
    class ControllerEvent : public PeripheralEvent {

    public:

        /**
         * @brief Constructs a new Controller Event.
         * 
         * @param controller_id The ID of the affected controller.
         */
        ControllerEvent(unsigned int controller_id)
            : PeripheralEvent(), controller_id_(controller_id) {}


        /**
         * @brief Get this Event's type.
         *
         * @return EventType The Event type.
         */
        EventType getEventType() const { return EventType::CONTROLLER; }

        /**
         * @brief Returns the ID of the affected controller.
         * 
         * @return unsigned int The ID of the affected controller.
         */
        inline unsigned int controllerId() const { return controller_id_; }

    protected:

        /** The ID of the affected controller. */
        unsigned int controller_id_;

    };

    /**
     * @brief An event triggered by a controller button action.
     * @details
     */
    class ControllerButtonEvent : public ControllerEvent {

    public:

        /**
         * @brief Constructs a new Controller Button Event.
         * 
         * @param controller_id The ID of the affected controller.
         * @param button_id The ID of the affected button.
         * @param state The state of the affected button.
         */
        ControllerButtonEvent(unsigned int controller_id, unsigned int button_id, input::ButtonState state)
            : ControllerEvent(controller_id), button_id_(button_id), state_(state) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Controller Button Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the ID of the button affected.
         * 
         * @return unsigned int The ID of the button affected.
         */
        inline unsigned int buttonId() const { return button_id_; }
        /**
         * @brief Returns the state of the affected button.
         * 
         * @return input::ButtonState The state of the affected button.
         */
        inline input::ButtonState state() const { return state_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::CONTROLLER) << 4);

    private:

        /** The ID of the button affected. */
        unsigned int button_id_;
        /** The state of the affected button. */
        input::ButtonState state_;

    };

    /**
     * @brief An event triggered by a controller axis change, such as moving a joystick.
     * @details
     */
    class ControllerAxisEvent : public ControllerEvent {

    public:

        /**
         * @brief Constructs a new Controller Axis Event.
         * 
         * @param controller_id The ID of the affected controller.
         * @param axis_id The ID of the affected axis.
         * @param x The x input of the axis.
         * @param y The y input of the axis.
         */
        ControllerAxisEvent(unsigned int controller_id, unsigned int axis_id, float x, float y)
            : ControllerEvent(controller_id), axis_id_(axis_id), x_(x), y_(y) {}

        /**
         * @brief Get the name of this Event.
         *
         * @return const char* The name of this Event.
         */
        const char* getName() const { return "Controller Axis Event"; }
        /**
         * @brief Get the ID of this Event.
         *
         * @return const unsigned int The ID of this Event.
         */
        const unsigned int getId() const { return EVENT_ID; }

        /**
         * @brief Returns the ID of the affected axis.
         * 
         * @return unsigned int The ID of the affected axis.
         */
        inline unsigned int axisId() const { return axis_id_; }
        /**
         * @brief Returns the x input of the axis.
         * 
         * @return float The x input of the axis.
         */
        inline float x() const { return x_; }
        /**
         * @brief Returns the y input of the axis.
         * 
         * @return float The y input of the axis.
         */
        inline float y() const { return y_; }

        /** The ID number of this event type. */
        static const unsigned int EVENT_ID = (static_cast<unsigned int>(EventType::CONTROLLER) << 4) | 1;

    private:

        /** The ID of the affected axis. */
        unsigned int axis_id_;
        /** The x input of the axis. */
        float x_;
        /** The y input of the axis. */
        float y_;

    };
}

#endif